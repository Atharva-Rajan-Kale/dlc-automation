# .github/workflows/autogluon-pr-creation.yml
name: AutoGluon PR-Only Creation Workflow

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version (e.g., 1.4.0)'
        required: true
        type: string
      previous_version:
        description: 'Previous version (e.g., 1.3.0)'
        required: true
        type: string
      fork_url:
        description: 'Your fork URL'
        required: true
        type: string
      source_repo_url:
        description: 'Source repository URL to clone from'
        required: false
        type: string
        default: 'https://github.com/Atharva-Rajan-Kale/deep-learning-container.git'
      source_branch:
        description: 'Source branch to clone'
        required: false
        type: string
        default: 'pr-testing'
      workflow_type:
        description: 'PR workflow type to run'
        required: true
        type: choice
        options:
          - 'pr-only'
        default: 'pr-only'
      enable_testing:
        description: 'Enable testing agents'
        required: false
        type: boolean
        default: true

permissions:
  id-token: write   # Required for OIDC
  contents: read
  actions: read

env:
  PYTHONPATH: ${{ github.workspace }}/src
  REGION: us-east-1
  CODEBUILD_REGION: us-west-2

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      workflow-type: ${{ steps.setup.outputs.workflow-type }}
      job-params: ${{ steps.setup.outputs.job-params }}
    steps:
      - name: Setup workflow parameters
        id: setup
        run: |
          echo "python-version=3.11" >> $GITHUB_OUTPUT
          echo "workflow-type=${{ inputs.workflow_type }}" >> $GITHUB_OUTPUT
          
          # Map workflow types to job parameters (simplified for PR-only)
          echo "job-params=--pr-only" >> $GITHUB_OUTPUT
          
          echo "🚀 Starting AutoGluon PR-Only Creation Workflow"
          echo "Version: ${{ inputs.previous_version }} → ${{ inputs.current_version }}"
          echo "Workflow: ${{ inputs.workflow_type }}"
          echo "Source Repo: ${{ inputs.source_repo_url }}"
          echo "Source Branch: ${{ inputs.source_branch }}"
          echo "Fork: ${{ inputs.fork_url }}"

  validate-inputs:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.current_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid current version format: ${{ inputs.current_version }}"
            exit 1
          fi
          if [[ ! "${{ inputs.previous_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid previous version format: ${{ inputs.previous_version }}"
            exit 1
          fi
          echo "✅ Version formats are valid"

      - name: Validate repository URLs
        run: |
          if [[ ! "${{ inputs.fork_url }}" =~ ^https://github\.com/.+/.+$ ]]; then
            echo "❌ Invalid fork URL format: ${{ inputs.fork_url }}"
            exit 1
          fi
          if [[ ! "${{ inputs.source_repo_url }}" =~ ^https://github\.com/.+/.+$ ]]; then
            echo "❌ Invalid source repository URL format: ${{ inputs.source_repo_url }}"
            exit 1
          fi
          echo "✅ Repository URL formats are valid"

      - name: Validate source branch
        run: |
          if [[ -z "${{ inputs.source_branch }}" ]]; then
            echo "❌ Source branch cannot be empty"
            exit 1
          fi
          echo "✅ Source branch is valid: ${{ inputs.source_branch }}"

  pr-creation-automation:
    runs-on: ubuntu-latest
    needs: [setup, validate-inputs]
    timeout-minutes: 240
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/dlc-automation-oidc-role
          aws-region: ${{ env.REGION }}
          
      # Fallback to access keys if OIDC fails
      - name: Configure AWS credentials (Access Keys Fallback)
        if: failure()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Submit AWS Batch Job for PR Creation
        id: batch-job
        run: |
          echo "🚀 Submitting AutoGluon PR-Only Creation to AWS Batch"
          
          JOB_PARAMS="${{ needs.setup.outputs.job-params }}"
          
          echo "📋 Job Parameters: $JOB_PARAMS"
          echo "🔧 Source Repository: ${{ inputs.source_repo_url }}"
          echo "🌿 Source Branch: ${{ inputs.source_branch }}"
          
          JOB_ID=$(aws batch submit-job \
            --job-name "autogluon-pr-only-${{ inputs.workflow_type }}-${{ github.run_number }}" \
            --job-queue "${{ secrets.BATCH_JOB_QUEUE }}" \
            --job-definition "${{ secrets.BATCH_JOB_DEFINITION }}" \
            --container-overrides 'environment=[{name=GITHUB_TOKEN,value=${{ secrets.TOKEN }}},{name=currentVersion,value=${{ inputs.current_version }}},{name=previousVersion,value=${{ inputs.previous_version }}},{name=forkUrl,value=${{ inputs.fork_url }}},{name=sourceRepoUrl,value=${{ inputs.source_repo_url }}},{name=sourceBranch,value=${{ inputs.source_branch }}},{name=jobParams,value=$JOB_PARAMS},{name=ACCOUNT_ID,value=${{ secrets.ACCOUNT_ID }}},{name=REGION,value=us-east-1},{name=CODEBUILD_REGION,value=us-west-2},{name=BEDROCK_INFERENCE_PROFILE_ARN,value=${{ secrets.BEDROCK_INFERENCE_PROFILE_ARN }}},{name=enableTesting,value=${{ inputs.enable_testing }}}]' \
            --query 'jobId' --output text)
          
          echo "job-id=$JOB_ID" >> $GITHUB_OUTPUT
          echo "✅ Batch job submitted: $JOB_ID"

      - name: Wait for Batch Job Completion
        run: |
          echo "⏳ Waiting for PR creation job completion: ${{ steps.batch-job.outputs.job-id }}"
          
          LOG_STREAM=""
          LAST_LOG_TIME=0
          
          while true; do
            JOB_STATUS=$(aws batch describe-jobs --jobs ${{ steps.batch-job.outputs.job-id }} --query 'jobs[0].status' --output text)
            echo "📊 Current status: $JOB_STATUS"
            
            # Get log stream name once job is running
            if [ "$JOB_STATUS" = "RUNNING" ] && [ -z "$LOG_STREAM" ]; then
              LOG_STREAM=$(aws batch describe-jobs --jobs ${{ steps.batch-job.outputs.job-id }} --query 'jobs[0].attempts[0].container.logStreamName' --output text 2>/dev/null || echo "")
              if [ "$LOG_STREAM" != "" ] && [ "$LOG_STREAM" != "None" ]; then
                echo "📝 Log stream: $LOG_STREAM"
              fi
            fi
            
            # Show real-time logs if available
            if [ "$LOG_STREAM" != "" ] && [ "$LOG_STREAM" != "None" ]; then
              CURRENT_TIME=$(date +%s)
              CURRENT_TIME_MS=$((CURRENT_TIME * 1000))
              
              if [ $LAST_LOG_TIME -eq 0 ]; then
                LAST_LOG_TIME=$((CURRENT_TIME_MS - 300000))  # Start 5 minutes ago
              fi
              
              # Get new logs since last check
              NEW_LOGS=$(aws logs get-log-events \
                --log-group-name /aws/batch/job \
                --log-stream-name "$LOG_STREAM" \
                --start-time $LAST_LOG_TIME \
                --query 'events[].message' \
                --output text 2>/dev/null || echo "")
              
              if [ "$NEW_LOGS" != "" ] && [ "$NEW_LOGS" != "None" ]; then
                echo "📋 Recent logs:"
                echo "$NEW_LOGS" | head -20
                echo "---"
              fi
              
              LAST_LOG_TIME=$CURRENT_TIME_MS
            fi
            
            if [ "$JOB_STATUS" = "SUCCEEDED" ]; then
              echo "✅ PR creation job completed successfully"
              break
            elif [ "$JOB_STATUS" = "FAILED" ]; then
              echo "❌ PR creation job failed"
              # Show final logs on failure
              if [ "$LOG_STREAM" != "" ] && [ "$LOG_STREAM" != "None" ]; then
                echo "📋 Final logs:"
                aws logs get-log-events \
                  --log-group-name /aws/batch/job \
                  --log-stream-name "$LOG_STREAM" \
                  --query 'events[-50:].message' \
                  --output text 2>/dev/null || echo "No logs available"
              fi
              exit 1
            fi
            
            sleep 30
          done

      - name: Upload PR creation logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-creation-logs-${{ inputs.workflow_type }}-${{ inputs.current_version }}
          path: |
            pr_creation_logs/
            *.log
          retention-days: 30

      - name: Upload step outputs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-step-outputs-${{ inputs.workflow_type }}-${{ inputs.current_version }}
          path: |
            step_outputs/
            results/
          retention-days: 7

      - name: Generate summary
        if: always()
        run: |
          echo "## 🤖 AutoGluon PR-Only Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ inputs.previous_version }} → ${{ inputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Type:** ${{ inputs.workflow_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source Repository:** ${{ inputs.source_repo_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Source Branch:** ${{ inputs.source_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Fork URL:** ${{ inputs.fork_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Testing Enabled:** ${{ inputs.enable_testing }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**CodeBuild Region:** ${{ env.CODEBUILD_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Authentication:** OIDC" >> $GITHUB_STEP_SUMMARY
          echo "**Job Parameters:** ${{ needs.setup.outputs.job-params }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "pr_creation_logs/enhanced_main_automation.log" ]; then
            echo "**Recent Log Output:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -50 pr_creation_logs/enhanced_main_automation.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  notify-completion:
    runs-on: ubuntu-latest
    needs: [pr-creation-automation]
    if: always()
    steps:
      - name: Notify completion
        run: |
          if [ "${{ needs.pr-creation-automation.result }}" == "success" ]; then
            echo "✅ AutoGluon PR-Only Creation completed successfully!"
            echo "Version: ${{ inputs.previous_version }} → ${{ inputs.current_version }}"
            echo "Workflow: ${{ inputs.workflow_type }}"
            echo "Source Repository: ${{ inputs.source_repo_url }}"
            echo "Source Branch: ${{ inputs.source_branch }}"
            echo "Authentication: OIDC"
            echo "🔗 Check your fork at: ${{ inputs.fork_url }}"
          else
            echo "❌ AutoGluon PR-Only Creation failed or was cancelled"
            echo "Please check the logs for details"
            exit 1
          fi