# .github/workflows/autogluon-test-agent.yml
name: AutoGluon Test Agent

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version (e.g., 1.4.0)'
        required: true
        type: string
      previous_version:
        description: 'Previous version (e.g., 1.3.0)'
        required: true
        type: string
      fork_url:
        description: 'Your fork URL'
        required: true
        type: string
      test_suite:
        description: 'Test suite to run'
        required: true
        type: choice
        options:
          - 'all'
          - 'tabular'
          - 'automm'
          - 'timeseries'
        default: 'all'
      image_tag:
        description: 'Specific image tag to test (optional - will use latest if not provided)'
        required: false
        type: string

permissions:
  id-token: write   # Required for OIDC
  contents: read
  actions: read

env:
  PYTHONPATH: ${{ github.workspace }}/src
  REGION: us-east-1
  CODEBUILD_REGION: us-west-2

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      test-suite: ${{ steps.setup.outputs.test-suite }}
    steps:
      - name: Setup workflow parameters
        id: setup
        run: |
          echo "python-version=3.11" >> $GITHUB_OUTPUT
          echo "test-suite=${{ inputs.test_suite }}" >> $GITHUB_OUTPUT
          echo "üß™ Starting AutoGluon Test Agent"
          echo "Version: ${{ inputs.current_version }}"
          echo "Test Suite: ${{ inputs.test_suite }}"
          echo "Image Tag: ${{ inputs.image_tag || 'latest' }}"

  validate-inputs:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.current_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid current version format: ${{ inputs.current_version }}"
            exit 1
          fi
          if [[ ! "${{ inputs.previous_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid previous version format: ${{ inputs.previous_version }}"
            exit 1
          fi
          echo "‚úÖ Version formats are valid"

      - name: Validate fork URL
        run: |
          if [[ ! "${{ inputs.fork_url }}" =~ ^https://github\.com/.+/.+$ ]]; then
            echo "‚ùå Invalid fork URL format: ${{ inputs.fork_url }}"
            exit 1
          fi
          echo "‚úÖ Fork URL format is valid"

  test-agent:
    runs-on: ubuntu-latest
    needs: [setup, validate-inputs]
    timeout-minutes: 120
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/dlc-automation-oidc-role
          aws-region: ${{ env.REGION }}
          
      # Fallback to access keys if OIDC fails
      - name: Configure AWS credentials (Access Keys Fallback)
        if: failure()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Submit AWS Batch Job for Test Agent
        id: batch-job
        run: |
          echo "üß™ Submitting AutoGluon Test Agent to AWS Batch"
          
          # Use the test agent script instead of the main automation
          JOB_PARAMS="--autogluon-tests"
          
          # Add test suite parameter
          if [ "${{ inputs.test_suite }}" != "all" ]; then
            JOB_PARAMS="$JOB_PARAMS --test-suite=${{ inputs.test_suite }}"
          fi
          
          # Add image tag if provided
          if [ "${{ inputs.image_tag }}" != "" ]; then
            JOB_PARAMS="$JOB_PARAMS --image-tag=${{ inputs.image_tag }}"
          fi
          
          JOB_ID=$(aws batch submit-job \
            --job-name "autogluon-test-agent-${{ inputs.workflow_type }}-${{ github.run_number }}" \
            --job-queue "${{ secrets.BATCH_JOB_QUEUE }}" \
            --job-definition "${{ secrets.BATCH_TEST_JOB_DEFINITION }}" \
            --container-overrides 'environment=[{name=GITHUB_TOKEN,value=${{ secrets.TOKEN }}},{name=currentVersion,value=${{ inputs.current_version }}},{name=previousVersion,value=${{ inputs.previous_version }}},{name=forkUrl,value=${{ inputs.fork_url }}},{name=jobParams,value=$JOB_PARAMS},{name=ACCOUNT_ID,value=${{ secrets.ACCOUNT_ID }}},{name=REGION,value=us-east-1},{name=CODEBUILD_REGION,value=us-west-2},{name=BEDROCK_INFERENCE_PROFILE_ARN,value=${{ secrets.BEDROCK_INFERENCE_PROFILE_ARN }}}]' \
            --query 'jobId' --output text)
          
          echo "job-id=$JOB_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ Batch job submitted: $JOB_ID"

      - name: Wait for Test Agent Completion
        run: |
          echo "‚è≥ Waiting for test agent completion: ${{ steps.batch-job.outputs.job-id }}"
          
          LOG_STREAM=""
          LAST_LOG_TIME=0
          
          while true; do
            JOB_STATUS=$(aws batch describe-jobs --jobs ${{ steps.batch-job.outputs.job-id }} --query 'jobs[0].status' --output text)
            echo "üìä Current status: $JOB_STATUS"
            
            # Get log stream name once job is running
            if [ "$JOB_STATUS" = "RUNNING" ] && [ -z "$LOG_STREAM" ]; then
              LOG_STREAM=$(aws batch describe-jobs --jobs ${{ steps.batch-job.outputs.job-id }} --query 'jobs[0].attempts[0].container.logStreamName' --output text 2>/dev/null || echo "")
              if [ "$LOG_STREAM" != "" ] && [ "$LOG_STREAM" != "None" ]; then
                echo "üìù Log stream: $LOG_STREAM"
              fi
            fi
            
            # Show real-time logs if available
            if [ "$LOG_STREAM" != "" ] && [ "$LOG_STREAM" != "None" ]; then
              CURRENT_TIME=$(date +%s)
              CURRENT_TIME_MS=$((CURRENT_TIME * 1000))
              
              if [ $LAST_LOG_TIME -eq 0 ]; then
                LAST_LOG_TIME=$((CURRENT_TIME_MS - 300000))  # Start 5 minutes ago
              fi
              
              # Get new logs since last check
              NEW_LOGS=$(aws logs get-log-events \
                --log-group-name /aws/batch/job \
                --log-stream-name "$LOG_STREAM" \
                --start-time $LAST_LOG_TIME \
                --query 'events[].message' \
                --output text 2>/dev/null || echo "")
              
              if [ "$NEW_LOGS" != "" ] && [ "$NEW_LOGS" != "None" ]; then
                echo "üìã Recent test logs:"
                echo "$NEW_LOGS" | head -20
                echo "---"
              fi
              
              LAST_LOG_TIME=$CURRENT_TIME_MS
            fi
            
            if [ "$JOB_STATUS" = "SUCCEEDED" ]; then
              echo "‚úÖ Test agent completed successfully"
              break
            elif [ "$JOB_STATUS" = "FAILED" ]; then
              echo "‚ùå Test agent failed"
              # Show final logs on failure
              if [ "$LOG_STREAM" != "" ] && [ "$LOG_STREAM" != "None" ]; then
                echo "üìã Final test logs:"
                aws logs get-log-events \
                  --log-group-name /aws/batch/job \
                  --log-stream-name "$LOG_STREAM" \
                  --query 'events[-50:].message' \
                  --output text 2>/dev/null || echo "No logs available"
              fi
              exit 1
            fi
            
            sleep 30
          done

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ inputs.test_suite }}-${{ inputs.current_version }}
          path: |
            test_results/
            test_logs/
            *.log
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "## üß™ AutoGluon Test Agent Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ inputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Suite:** ${{ inputs.test_suite }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ inputs.image_tag || 'latest' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Fork URL:** ${{ inputs.fork_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Authentication:** OIDC" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "test_logs/autogluon_test_agent.log" ]; then
            echo "**Recent Test Output:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -50 test_logs/autogluon_test_agent.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  notify-completion:
    runs-on: ubuntu-latest
    needs: [test-agent]
    if: always()
    steps:
      - name: Notify test completion
        run: |
          if [ "${{ needs.test-agent.result }}" == "success" ]; then
            echo "‚úÖ AutoGluon Test Agent completed successfully!"
            echo "Version: ${{ inputs.current_version }}"
            echo "Test Suite: ${{ inputs.test_suite }}"
            echo "Authentication: OIDC"
          else
            echo "‚ùå AutoGluon Test Agent failed or was cancelled"
            echo "Please check the logs for details"
            exit 1
          fi