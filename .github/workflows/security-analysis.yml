# .github/workflows/security-analysis.yml
name: Security Analysis & Vulnerability Management

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version (e.g., 1.4.0)'
        required: true
        type: string
      previous_version:
        description: 'Previous version (e.g., 1.3.0)'
        required: true
        type: string
      fork_url:
        description: 'Your fork URL'
        required: true
        type: string
      pr_number:
        description: 'PR number to analyze (optional)'
        required: false
        type: string
      analysis_type:
        description: 'Type of security analysis'
        required: true
        type: choice
        options:
          - 'full-analysis'
          - 'deterministic-only'
          - 'monitor-only'
          - 'fix-vulnerabilities'
        default: 'full-analysis'
      max_wait_minutes:
        description: 'Max minutes to wait for security tests'
        required: false
        type: number
        default: 180

  schedule:
    # Run security analysis daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHONPATH: ${{ github.workspace }}/src
  REGION: us-east-1
  CODEBUILD_REGION: us-west-2

jobs:
  security-setup:
    runs-on: ubuntu-latest
    outputs:
      should-run-analysis: ${{ steps.check.outputs.should-run }}
      analysis-type: ${{ steps.check.outputs.analysis-type }}
    steps:
      - name: Check if security analysis should run
        id: check
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "analysis-type=monitor-only" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "analysis-type=${{ inputs.analysis_type }}" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi

  security-analysis:
    runs-on: ubuntu-latest
    needs: security-setup
    if: needs.security-setup.outputs.should-run == 'true'
    timeout-minutes: 240
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Submit Security Analysis Batch Job
        run: |
          # Determine version inputs based on trigger
          if [ "${{ github.event_name }}" == "schedule" ]; then
            current_version="1.4.0"
            previous_version="1.3.0"
            fork_url="https://github.com/your-username/deep-learning-containers"
          else
            current_version="${{ inputs.current_version }}"
            previous_version="${{ inputs.previous_version }}"
            fork_url="${{ inputs.fork_url }}"
          fi
          
          JOB_ID=$(aws batch submit-job \
            --job-name "security-analysis-${{ needs.security-setup.outputs.analysis-type }}-${{ github.run_number }}" \
            --job-queue "${{ secrets.BATCH_JOB_QUEUE }}" \
            --job-definition "${{ secrets.BATCH_SECURITY_JOB_DEFINITION }}" \
            --parameters analysisType="${{ needs.security-setup.outputs.analysis-type }}",currentVersion="$current_version",previousVersion="$previous_version",forkUrl="$fork_url",prNumber="${{ inputs.pr_number }}" \
            --query 'jobId' --output text)
          
          while true; do
            STATUS=$(aws batch describe-jobs --jobs $JOB_ID --query 'jobs[0].status' --output text)
            if [ "$STATUS" = "SUCCEEDED" ]; then break; elif [ "$STATUS" = "FAILED" ]; then exit 1; fi
            sleep 30
          done
          echo "✅ Security analysis completed: $JOB_ID"

      - name: Get Batch Job Results
        id: results
        if: always()
        run: |
          echo "📊 Getting security analysis results from S3..."
          
          # Download results from S3 (assuming batch job uploads results there)
          aws s3 cp s3://${{ secrets.BATCH_RESULTS_BUCKET }}/security-analysis-${{ github.run_number }}/ ./results/ --recursive || true
          
          # Set default values
          echo "vulnerabilities-found=0" >> $GITHUB_OUTPUT
          echo "vulnerabilities-fixed=0" >> $GITHUB_OUTPUT
          echo "tests-analyzed=0" >> $GITHUB_OUTPUT
          echo "has-critical=false" >> $GITHUB_OUTPUT
          
          # Parse results if available
          if [ -f "results/security_summary.json" ]; then
            vulnerabilities_found=$(jq -r '.vulnerabilities_found // 0' results/security_summary.json)
            vulnerabilities_fixed=$(jq -r '.vulnerabilities_fixed // 0' results/security_summary.json)
            tests_analyzed=$(jq -r '.tests_analyzed // 0' results/security_summary.json)
            has_critical=$(jq -r '.has_critical // false' results/security_summary.json)
            
            echo "vulnerabilities-found=$vulnerabilities_found" >> $GITHUB_OUTPUT
            echo "vulnerabilities-fixed=$vulnerabilities_fixed" >> $GITHUB_OUTPUT
            echo "tests-analyzed=$tests_analyzed" >> $GITHUB_OUTPUT
            echo "has-critical=$has_critical" >> $GITHUB_OUTPUT
          fi

      - name: Upload security analysis artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-analysis-${{ needs.security-setup.outputs.analysis-type }}-${{ github.run_number }}
          path: |
            automation_logs/security*.log
            security_analysis_results/
            vulnerability_reports/
            allowlist_updates/
          retention-days: 30

      - name: Generate security report
        if: always()
        run: |
          echo "## 🔒 Security Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Type:** ${{ needs.security-setup.outputs.analysis-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.security.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**CodeBuild Region:** ${{ env.CODEBUILD_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Vulnerabilities Found:** ${{ steps.results.outputs.vulnerabilities-found }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Vulnerabilities Fixed:** ${{ steps.results.outputs.vulnerabilities-fixed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests Analyzed:** ${{ steps.results.outputs.tests-analyzed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical Issues:** ${{ steps.results.outputs.has-critical }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add recent log output if available
          if [ -f "automation_logs/security_test.log" ]; then
            echo "### 📝 Recent Log Output" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -30 automation_logs/security_test.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for critical security issues
        if: steps.results.outputs.has-critical == 'true'
        run: |
          echo "🚨 Critical security vulnerabilities detected!"
          echo "Please review the security analysis artifacts and take immediate action."
          
          # Optionally fail the workflow for critical issues
          if [ "${{ needs.security-setup.outputs.analysis-type }}" != "monitor-only" ]; then
            exit 1
          fi

  vulnerability-tracking:
    runs-on: ubuntu-latest
    needs: [security-setup, security-analysis]
    if: always() && needs.security-setup.outputs.should-run == 'true'
    steps:
      - name: Update vulnerability tracking
        run: |
          echo "📋 Updating vulnerability tracking..."
          
          # Here you could integrate with your issue tracking system
          # For example, create GitHub issues for new vulnerabilities
          
          if [ "${{ needs.security-analysis.outputs.vulnerabilities-found }}" -gt "0" ]; then
            echo "Found ${{ needs.security-analysis.outputs.vulnerabilities-found }} vulnerabilities"
            # Add logic to create or update tracking issues
          fi
          
          if [ "${{ needs.security-analysis.outputs.vulnerabilities-fixed }}" -gt "0" ]; then
            echo "Fixed ${{ needs.security-analysis.outputs.vulnerabilities-fixed }} vulnerabilities"
            # Add logic to close resolved tracking issues
          fi

      - name: Send notifications
        if: needs.security-analysis.outputs.has-critical == 'true'
        run: |
          echo "🚨 Sending critical vulnerability notifications..."
          # Add your notification logic here (Slack, email, etc.)
          echo "Critical vulnerabilities found in security analysis"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run: ${{ github.run_number }}"
          echo "Analysis Type: ${{ needs.security-setup.outputs.analysis-type }}"