# .github/workflows/autogluon-release.yml
name: AutoGluon Release Automation

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version (e.g., 1.4.0)'
        required: true
        type: string
      previous_version:
        description: 'Previous version (e.g., 1.3.0)'
        required: true
        type: string
      fork_url:
        description: 'Your fork URL'
        required: true
        type: string
      workflow_type:
        description: 'Workflow type to run'
        required: true
        type: choice
        options:
          - 'complete'
          - 'steps-125'
          - 'steps-34'
          - 'step-6'
          - 'create-pr'
          - 'infrastructure'
          - 'release-images'
          - 'asimov-scan'
          - 'post-pr-workflow'
        default: 'complete'
      enable_testing:
        description: 'Enable testing agents'
        required: false
        type: boolean
        default: true

env:
  PYTHONPATH: ${{ github.workspace }}/src
  REGION: us-east-1
  CODEBUILD_REGION: us-west-2

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      workflow-type: ${{ steps.setup.outputs.workflow-type }}
    steps:
      - name: Setup workflow parameters
        id: setup
        run: |
          echo "python-version=3.11" >> $GITHUB_OUTPUT
          echo "workflow-type=${{ inputs.workflow_type }}" >> $GITHUB_OUTPUT
          echo "üöÄ Starting AutoGluon Release Automation"
          echo "Version: ${{ inputs.previous_version }} ‚Üí ${{ inputs.current_version }}"
          echo "Workflow: ${{ inputs.workflow_type }}"

  validate-inputs:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.current_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid current version format: ${{ inputs.current_version }}"
            exit 1
          fi
          if [[ ! "${{ inputs.previous_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid previous version format: ${{ inputs.previous_version }}"
            exit 1
          fi
          echo "‚úÖ Version formats are valid"

      - name: Validate fork URL
        run: |
          if [[ ! "${{ inputs.fork_url }}" =~ ^https://github\.com/.+/.+$ ]]; then
            echo "‚ùå Invalid fork URL format: ${{ inputs.fork_url }}"
            exit 1
          fi
          echo "‚úÖ Fork URL format is valid"

  main-automation:
    runs-on: ubuntu-latest
    needs: [setup, validate-inputs]
    timeout-minutes: 180
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Submit AWS Batch Job
        id: batch-job
        run: |
          echo "üöÄ Submitting AutoGluon Release Automation to AWS Batch"
          
          # Determine job parameters based on workflow type
          case "${{ inputs.workflow_type }}" in
            "complete") JOB_PARAMS="--complete" ;;
            "steps-125") JOB_PARAMS="--steps-125" ;;
            "steps-34") JOB_PARAMS="--steps-34" ;;
            "step-6") JOB_PARAMS="--step-6-only" ;;
            "create-pr") JOB_PARAMS="--pr-only" ;;
            "infrastructure") JOB_PARAMS="--infrastructure" ;;
            "release-images") JOB_PARAMS="--release-images" ;;
            "asimov-scan") JOB_PARAMS="--asimov-scan" ;;
            "post-pr-workflow") JOB_PARAMS="--post-pr-workflow" ;;
          esac
          
          JOB_ID=$(aws batch submit-job \
            --job-name "autogluon-release-${{ inputs.workflow_type }}-${{ github.run_number }}" \
            --job-queue "${{ secrets.BATCH_JOB_QUEUE }}" \
            --job-definition "${{ secrets.BATCH_JOB_DEFINITION }}" \
            --container-overrides 'environment=[{name=GITHUB_TOKEN,value=${{ secrets.TOKEN }}},{name=currentVersion,value=${{ inputs.current_version }}},{name=previousVersion,value=${{ inputs.previous_version }}},{name=forkUrl,value=${{ inputs.fork_url }}},{name=jobParams,value=$JOB_PARAMS},{name=ACCOUNT_ID,value=${{ secrets.ACCOUNT_ID }}}]' \
            --query 'jobId' --output text)
          
          echo "job-id=$JOB_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ Batch job submitted: $JOB_ID"

      - name: Wait for Batch Job Completion
        run: |
          echo "‚è≥ Waiting for batch job completion: ${{ steps.batch-job.outputs.job-id }}"
          
          while true; do
            JOB_STATUS=$(aws batch describe-jobs --jobs ${{ steps.batch-job.outputs.job-id }} --query 'jobs[0].status' --output text)
            echo "Current status: $JOB_STATUS"
            
            if [ "$JOB_STATUS" = "SUCCEEDED" ]; then
              echo "‚úÖ Job completed successfully"
              break
            elif [ "$JOB_STATUS" = "FAILED" ]; then
              echo "‚ùå Job failed"
              exit 1
            fi
            
            sleep 30
          done

      - name: Upload automation logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: automation-logs-${{ inputs.workflow_type }}-${{ inputs.current_version }}
          path: |
            automation_logs/
            *.log
          retention-days: 30

      - name: Upload step outputs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: step-outputs-${{ inputs.workflow_type }}-${{ inputs.current_version }}
          path: |
            step_outputs/
            results/
          retention-days: 7

      - name: Generate summary
        if: always()
        run: |
          echo "## ü§ñ AutoGluon Release Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ inputs.previous_version }} ‚Üí ${{ inputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Type:** ${{ inputs.workflow_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Fork URL:** ${{ inputs.fork_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Testing Enabled:** ${{ inputs.enable_testing }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**CodeBuild Region:** ${{ env.CODEBUILD_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "automation_logs/enhanced_main_automation.log" ]; then
            echo "**Recent Log Output:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -50 automation_logs/enhanced_main_automation.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  notify-completion:
    runs-on: ubuntu-latest
    needs: [main-automation]
    if: always()
    steps:
      - name: Notify completion
        run: |
          if [ "${{ needs.main-automation.result }}" == "success" ]; then
            echo "‚úÖ AutoGluon Release Automation completed successfully!"
            echo "Version: ${{ inputs.previous_version }} ‚Üí ${{ inputs.current_version }}"
            echo "Workflow: ${{ inputs.workflow_type }}"
          else
            echo "‚ùå AutoGluon Release Automation failed or was cancelled"
            echo "Please check the logs for details"
            exit 1
          fi