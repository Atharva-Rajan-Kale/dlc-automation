# .github/workflows/autogluon-release.yml
name: AutoGluon Release Automation

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version (e.g., 1.4.0)'
        required: true
        type: string
      previous_version:
        description: 'Previous version (e.g., 1.3.0)'
        required: true
        type: string
      fork_url:
        description: 'Your fork URL'
        required: true
        type: string
      workflow_type:
        description: 'Workflow type to run'
        required: true
        type: choice
        options:
          - 'complete'
          - 'steps-125'
          - 'steps-34'
          - 'step-6'
          - 'create-pr'
          - 'infrastructure'
          - 'release-images'
          - 'asimov-scan'
          - 'post-pr-workflow'
        default: 'complete'
      enable_testing:
        description: 'Enable testing agents'
        required: false
        type: boolean
        default: true

env:
  PYTHONPATH: ${{ github.workspace }}/src
  REGION: us-east-1

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      workflow-type: ${{ steps.setup.outputs.workflow-type }}
    steps:
      - name: Setup workflow parameters
        id: setup
        run: |
          echo "python-version=3.11" >> $GITHUB_OUTPUT
          echo "workflow-type=${{ inputs.workflow_type }}" >> $GITHUB_OUTPUT
          echo "üöÄ Starting AutoGluon Release Automation"
          echo "Version: ${{ inputs.previous_version }} ‚Üí ${{ inputs.current_version }}"
          echo "Workflow: ${{ inputs.workflow_type }}"

  validate-inputs:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.current_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid current version format: ${{ inputs.current_version }}"
            exit 1
          fi
          if [[ ! "${{ inputs.previous_version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid previous version format: ${{ inputs.previous_version }}"
            exit 1
          fi
          echo "‚úÖ Version formats are valid"

      - name: Validate fork URL
        run: |
          if [[ ! "${{ inputs.fork_url }}" =~ ^https://github\.com/.+/.+$ ]]; then
            echo "‚ùå Invalid fork URL format: ${{ inputs.fork_url }}"
            exit 1
          fi
          echo "‚úÖ Fork URL format is valid"

  main-automation:
    runs-on: ubuntu-latest
    needs: [setup, validate-inputs]
    timeout-minutes: 180
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.setup.outputs.python-version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git curl wget jq
          
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements_agent.txt
          echo "‚úÖ Python dependencies installed"

      - name: Configure environment variables
        run: |
          echo "ACCOUNT_ID=${{ secrets.ACCOUNT_ID }}" >> $GITHUB_ENV
          echo "REGION=${{ env.REGION }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
          
          # CodeBuild credentials
          echo "CODEBUILD_AWS_ACCESS_KEY_ID=${{ secrets.CODEBUILD_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "CODEBUILD_AWS_SECRET_ACCESS_KEY=${{ secrets.CODEBUILD_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "CODEBUILD_AWS_SESSION_TOKEN=${{ secrets.CODEBUILD_AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
          echo "CODEBUILD_REGION=${{ env.REGION }}" >> $GITHUB_ENV
          
          # Bedrock credentials
          echo "BEDROCK_INFERENCE_PROFILE_ARN=${{ secrets.BEDROCK_INFERENCE_PROFILE_ARN }}" >> $GITHUB_ENV
          echo "BEDROCK_AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "BEDROCK_AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "BEDROCK_AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
          echo "BEDROCK_REGION=${{ env.REGION }}" >> $GITHUB_ENV
          
          # GitHub token
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: ECR Login
        run: |
          echo "üîê Logging into ECR..."
          aws ecr get-login-password --region ${{ env.REGION }} | docker login --username AWS --password-stdin ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ env.REGION }}.amazonaws.com
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 763104351884.dkr.ecr.us-west-2.amazonaws.com
          echo "‚úÖ ECR login successful"

      - name: Run AutoGluon Release Automation
        id: automation
        run: |
          echo "üöÄ Starting automation with workflow type: ${{ inputs.workflow_type }}"
          
          # Base command
          cmd="python enhanced_main_automation.py"
          cmd="$cmd --current-version=${{ inputs.current_version }}"
          cmd="$cmd --previous-version=${{ inputs.previous_version }}"
          cmd="$cmd --fork-url=${{ inputs.fork_url }}"
          
          # Add workflow-specific flags
          case "${{ inputs.workflow_type }}" in
            "complete")
              cmd="$cmd --complete"
              ;;
            "steps-125")
              cmd="$cmd --steps-125"
              ;;
            "steps-34")
              cmd="$cmd --steps-34"
              ;;
            "step-6")
              cmd="$cmd --step-6-only"
              ;;
            "create-pr")
              cmd="$cmd --pr-only"
              ;;
            "infrastructure")
              cmd="$cmd --infrastructure"
              ;;
            "release-images")
              cmd="$cmd --release-images"
              ;;
            "asimov-scan")
              cmd="$cmd --asimov-scan"
              ;;
            "post-pr-workflow")
              cmd="$cmd --post-pr-workflow"
              ;;
          esac
          
          echo "üéØ Executing: $cmd"
          eval $cmd
        continue-on-error: true

      - name: Upload automation logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: automation-logs-${{ inputs.workflow_type }}-${{ inputs.current_version }}
          path: |
            automation_logs/
            *.log
          retention-days: 30

      - name: Upload step outputs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: step-outputs-${{ inputs.workflow_type }}-${{ inputs.current_version }}
          path: |
            step_outputs/
            results/
          retention-days: 7

      - name: Generate summary
        if: always()
        run: |
          echo "## ü§ñ AutoGluon Release Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ inputs.previous_version }} ‚Üí ${{ inputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Type:** ${{ inputs.workflow_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Fork URL:** ${{ inputs.fork_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Testing Enabled:** ${{ inputs.enable_testing }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "automation_logs/enhanced_main_automation.log" ]; then
            echo "**Recent Log Output:**" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -50 automation_logs/enhanced_main_automation.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  notify-completion:
    runs-on: ubuntu-latest
    needs: [main-automation]
    if: always()
    steps:
      - name: Notify completion
        run: |
          if [ "${{ needs.main-automation.result }}" == "success" ]; then
            echo "‚úÖ AutoGluon Release Automation completed successfully!"
            echo "Version: ${{ inputs.previous_version }} ‚Üí ${{ inputs.current_version }}"
            echo "Workflow: ${{ inputs.workflow_type }}"
          else
            echo "‚ùå AutoGluon Release Automation failed or was cancelled"
            echo "Please check the logs for details"
            exit 1
          fi