# .github/workflows/infrastructure-release.yml
name: Infrastructure & Release Management

on:
  workflow_dispatch:
    inputs:
      current_version:
        description: 'Current version (e.g., 1.4.0)'
        required: true
        type: string
      previous_version:
        description: 'Previous version (e.g., 1.3.0)'
        required: true
        type: string
      fork_url:
        description: 'Your fork URL'
        required: true
        type: string
      operation:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - 'infrastructure-deploy'
          - 'release-images'
          - 'asimov-scan'
          - 'post-pr-complete'
          - 'full-release-pipeline'
        default: 'infrastructure-deploy'
      skip_confirmations:
        description: 'Skip manual confirmations (for automation)'
        required: false
        type: boolean
        default: false

env:
  PYTHONPATH: ${{ github.workspace }}/src
  REGION: us-east-1
  CODEBUILD_REGION: us-west-2

jobs:
  infrastructure-setup:
    runs-on: ubuntu-latest
    outputs:
      operation: ${{ steps.setup.outputs.operation }}
      should-deploy-infra: ${{ steps.setup.outputs.deploy-infra }}
      should-update-images: ${{ steps.setup.outputs.update-images }}
      should-run-asimov: ${{ steps.setup.outputs.run-asimov }}
    steps:
      - name: Setup operation parameters
        id: setup
        run: |
          echo "operation=${{ inputs.operation }}" >> $GITHUB_OUTPUT
          
          case "${{ inputs.operation }}" in
            "infrastructure-deploy")
              echo "deploy-infra=true" >> $GITHUB_OUTPUT
              echo "update-images=false" >> $GITHUB_OUTPUT
              echo "run-asimov=false" >> $GITHUB_OUTPUT
              ;;
            "release-images")
              echo "deploy-infra=false" >> $GITHUB_OUTPUT
              echo "update-images=true" >> $GITHUB_OUTPUT
              echo "run-asimov=false" >> $GITHUB_OUTPUT
              ;;
            "asimov-scan")
              echo "deploy-infra=false" >> $GITHUB_OUTPUT
              echo "update-images=false" >> $GITHUB_OUTPUT
              echo "run-asimov=true" >> $GITHUB_OUTPUT
              ;;
            "post-pr-complete")
              echo "deploy-infra=true" >> $GITHUB_OUTPUT
              echo "update-images=true" >> $GITHUB_OUTPUT
              echo "run-asimov=true" >> $GITHUB_OUTPUT
              ;;
            "full-release-pipeline")
              echo "deploy-infra=true" >> $GITHUB_OUTPUT
              echo "update-images=true" >> $GITHUB_OUTPUT
              echo "run-asimov=true" >> $GITHUB_OUTPUT
              ;;
          esac

  infrastructure-deployment:
    runs-on: ubuntu-latest
    needs: infrastructure-setup
    if: needs.infrastructure-setup.outputs.should-deploy-infra == 'true'
    timeout-minutes: 60
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Submit Infrastructure Deployment Batch Job
        run: |
          JOB_ID=$(aws batch submit-job \
            --job-name "infrastructure-deploy-${{ github.run_number }}" \
            --job-queue "${{ secrets.BATCH_JOB_QUEUE }}" \
            --job-definition "${{ secrets.BATCH_INFRA_JOB_DEFINITION }}" \
            --parameters currentVersion="${{ inputs.current_version }}",previousVersion="${{ inputs.previous_version }}",forkUrl="${{ inputs.fork_url }}",skipConfirmations="${{ inputs.skip_confirmations }}" \
            --query 'jobId' --output text)
          
          while true; do
            STATUS=$(aws batch describe-jobs --jobs $JOB_ID --query 'jobs[0].status' --output text)
            if [ "$STATUS" = "SUCCEEDED" ]; then break; elif [ "$STATUS" = "FAILED" ]; then exit 1; fi
            sleep 30
          done
          echo "✅ Infrastructure deployment completed: $JOB_ID"

      - name: Upload infrastructure deployment logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: infrastructure-deployment-${{ inputs.current_version }}
          path: |
            automation_logs/dlc_cr*.log
            infrastructure_outputs/
          retention-days: 14

  release-images-update:
    runs-on: ubuntu-latest
    needs: [infrastructure-setup, infrastructure-deployment]
    if: always() && needs.infrastructure-setup.outputs.should-update-images == 'true'
    timeout-minutes: 90
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Submit Release Images Batch Job
        run: |
          JOB_ID=$(aws batch submit-job \
            --job-name "release-images-${{ github.run_number }}" \
            --job-queue "${{ secrets.BATCH_JOB_QUEUE }}" \
            --job-definition "${{ secrets.BATCH_RELEASE_JOB_DEFINITION }}" \
            --parameters currentVersion="${{ inputs.current_version }}",previousVersion="${{ inputs.previous_version }}",forkUrl="${{ inputs.fork_url }}" \
            --query 'jobId' --output text)
          
          while true; do
            STATUS=$(aws batch describe-jobs --jobs $JOB_ID --query 'jobs[0].status' --output text)
            if [ "$STATUS" = "SUCCEEDED" ]; then break; elif [ "$STATUS" = "FAILED" ]; then exit 1; fi
            sleep 30
          done
          echo "✅ Release images completed: $JOB_ID"

      - name: Upload release images logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-images-${{ inputs.current_version }}
          path: |
            automation_logs/autogluon_release*.log
            release_images_outputs/
          retention-days: 14

  asimov-security-scan:
    runs-on: ubuntu-latest
    needs: [infrastructure-setup, infrastructure-deployment, release-images-update]
    if: always() && needs.infrastructure-setup.outputs.should-run-asimov == 'true'
    timeout-minutes: 45
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION }}

      - name: Submit Asimov Security Scan Batch Job
        run: |
          JOB_ID=$(aws batch submit-job \
            --job-name "asimov-scan-${{ github.run_number }}" \
            --job-queue "${{ secrets.BATCH_JOB_QUEUE }}" \
            --job-definition "${{ secrets.BATCH_SECURITY_JOB_DEFINITION }}" \
            --parameters currentVersion="${{ inputs.current_version }}",previousVersion="${{ inputs.previous_version }}",forkUrl="${{ inputs.fork_url }}" \
            --query 'jobId' --output text)
          
          while true; do
            STATUS=$(aws batch describe-jobs --jobs $JOB_ID --query 'jobs[0].status' --output text)
            if [ "$STATUS" = "SUCCEEDED" ]; then break; elif [ "$STATUS" = "FAILED" ]; then exit 1; fi
            sleep 30
          done
          echo "✅ Asimov security scan completed: $JOB_ID"

      - name: Upload Asimov scan logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: asimov-scan-${{ inputs.current_version }}
          path: |
            automation_logs/asimov_scan*.log
            asimov_outputs/
          retention-days: 14

  release-summary:
    runs-on: ubuntu-latest
    needs: [infrastructure-setup, infrastructure-deployment, release-images-update, asimov-security-scan]
    if: always()
    steps:
      - name: Generate release summary
        run: |
          echo "## 🚀 Infrastructure & Release Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ inputs.previous_version }} → ${{ inputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Operation:** ${{ inputs.operation }}" >> $GITHUB_STEP_SUMMARY
          echo "**Fork URL:** ${{ inputs.fork_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "**CodeBuild Region:** ${{ env.CODEBUILD_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Component Status" >> $GITHUB_STEP_SUMMARY
          
          # Infrastructure deployment status
          if [ "${{ needs.infrastructure-deployment.result }}" == "success" ]; then
            echo "✅ **Infrastructure Deployment:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.infrastructure-deployment.result }}" == "failure" ]; then
            echo "❌ **Infrastructure Deployment:** Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.infrastructure-deployment.result }}" == "skipped" ]; then
            echo "⏭️ **Infrastructure Deployment:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Release images status
          if [ "${{ needs.release-images-update.result }}" == "success" ]; then
            echo "✅ **Release Images Update:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.release-images-update.result }}" == "failure" ]; then
            echo "❌ **Release Images Update:** Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.release-images-update.result }}" == "skipped" ]; then
            echo "⏭️ **Release Images Update:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Asimov scan status
          if [ "${{ needs.asimov-security-scan.result }}" == "success" ]; then
            echo "✅ **Asimov Security Scan:** Completed successfully" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.asimov-security-scan.result }}" == "failure" ]; then
            echo "❌ **Asimov Security Scan:** Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.asimov-security-scan.result }}" == "skipped" ]; then
            echo "⏭️ **Asimov Security Scan:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Next Steps" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall success
          if [[ "${{ needs.infrastructure-deployment.result }}" == "success" || "${{ needs.infrastructure-deployment.result }}" == "skipped" ]] && \
             [[ "${{ needs.release-images-update.result }}" == "success" || "${{ needs.release-images-update.result }}" == "skipped" ]] && \
             [[ "${{ needs.asimov-security-scan.result }}" == "success" || "${{ needs.asimov-security-scan.result }}" == "skipped" ]]; then
            echo "🎉 **Release pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The AutoGluon ${{ inputs.current_version }} release infrastructure has been deployed." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some components failed or need attention.**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed components and re-run as needed." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check overall success
        run: |
          # Count successful/skipped vs failed jobs
          success_count=0
          fail_count=0
          
          for result in "${{ needs.infrastructure-deployment.result }}" "${{ needs.release-images-update.result }}" "${{ needs.asimov-security-scan.result }}"; do
            if [[ "$result" == "success" || "$result" == "skipped" ]]; then
              ((success_count++))
            elif [[ "$result" == "failure" ]]; then
              ((fail_count++))
            fi
          done
          
          echo "Successful/Skipped jobs: $success_count"
          echo "Failed jobs: $fail_count"
          
          # Fail the workflow if any required jobs failed
          if [ $fail_count -gt 0 ]; then
            echo "❌ Release pipeline had failures"
            exit 1
          else
            echo "✅ Release pipeline completed successfully"
          fi