name: Validate AutoGluon Automation Setup

on:
  workflow_dispatch:
    inputs:
      full_validation:
        description: 'Run full validation including AWS services'
        required: true
        type: boolean
        default: true
      test_bedrock:
        description: 'Test Bedrock/AI functionality'
        required: true
        type: boolean
        default: true

env:
  PYTHON_VERSION: '3.11'
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Bedrock/AI Configuration
  BEDROCK_MODEL_ID: ${{ secrets.BEDROCK_MODEL_ID || 'anthropic.claude-3-5-sonnet-20241022-v2:0' }}
  BEDROCK_INFERENCE_PROFILE_ARN: ${{ secrets.BEDROCK_INFERENCE_PROFILE_ARN }}
  BEDROCK_AWS_ACCESS_KEY_ID: ${{ secrets.BEDROCK_AWS_ACCESS_KEY_ID }}
  BEDROCK_AWS_SECRET_ACCESS_KEY: ${{ secrets.BEDROCK_AWS_SECRET_ACCESS_KEY }}
  BEDROCK_REGION: ${{ secrets.BEDROCK_REGION || 'us-east-1' }}
  
  # CodeBuild Configuration
  CODEBUILD_AWS_ACCESS_KEY_ID: ${{ secrets.CODEBUILD_AWS_ACCESS_KEY_ID }}
  CODEBUILD_AWS_SECRET_ACCESS_KEY: ${{ secrets.CODEBUILD_AWS_SECRET_ACCESS_KEY }}
  CODEBUILD_REGION: ${{ secrets.CODEBUILD_REGION || 'us-west-2' }}

jobs:
  validate-setup:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install base dependencies
        run: |
          pip install --upgrade pip
          pip install boto3 requests pyyaml pathlib2

      - name: Install AI dependencies
        if: inputs.test_bedrock
        run: |
          pip install -r requirements_agent.txt || pip install langchain-aws langchain-core pydantic

      - name: Configure AWS credentials
        if: inputs.full_validation
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Run setup validation
        run: |
          echo "🔍 Running AutoGluon Automation Setup Validation..."
          python setup_validator.py

      - name: Test basic AWS connectivity
        if: inputs.full_validation
        run: |
          echo "🧪 Testing basic AWS connectivity..."
          python -c "
          import boto3
          import os
          
          # Test STS
          try:
              sts = boto3.client('sts')
              identity = sts.get_caller_identity()
              print(f'✅ AWS STS: Connected as {identity.get(\"Arn\")}')
          except Exception as e:
              print(f'❌ AWS STS: {e}')
              exit(1)
          
          # Test ECR
          try:
              ecr = boto3.client('ecr')
              repos = ecr.describe_repositories(maxResults=5)
              print(f'✅ AWS ECR: Found {len(repos[\"repositories\"])} repositories')
          except Exception as e:
              print(f'⚠️ AWS ECR: {e}')
          "

      - name: Test Bedrock access
        if: inputs.test_bedrock && inputs.full_validation
        run: |
          echo "🧪 Testing Bedrock access..."
          python -c "
          import boto3
          import os
          
          try:
              # Use Bedrock-specific credentials if available
              bedrock_access_key = os.environ.get('BEDROCK_AWS_ACCESS_KEY_ID')
              bedrock_secret_key = os.environ.get('BEDROCK_AWS_SECRET_ACCESS_KEY')
              bedrock_region = os.environ.get('BEDROCK_REGION', 'us-east-1')
              
              if bedrock_access_key and bedrock_secret_key:
                  session = boto3.Session(
                      aws_access_key_id=bedrock_access_key,
                      aws_secret_access_key=bedrock_secret_key,
                      region_name=bedrock_region
                  )
                  print('✅ Using dedicated Bedrock credentials')
              else:
                  session = boto3.Session()
                  print('⚠️ Using default AWS credentials for Bedrock')
              
              bedrock = session.client('bedrock-runtime', region_name=bedrock_region)
              print('✅ Bedrock client created successfully')
              
              # Check configuration
              model_id = os.environ.get('BEDROCK_MODEL_ID', 'anthropic.claude-3-5-sonnet-20241022-v2:0')
              inference_profile_arn = os.environ.get('BEDROCK_INFERENCE_PROFILE_ARN')
              
              print(f'📋 Model ID: {model_id}')
              if inference_profile_arn:
                  print(f'📋 Inference Profile: {inference_profile_arn[:50]}...')
              else:
                  print('📋 No inference profile configured')
                  
          except Exception as e:
              print(f'❌ Bedrock test failed: {e}')
              exit(1)
          "

      - name: Test GitHub API access
        run: |
          echo "🧪 Testing GitHub API access..."
          python -c "
          import requests
          import os
          
          token = os.environ.get('GITHUB_TOKEN')
          if not token:
              print('❌ GITHUB_TOKEN not found')
              exit(1)
          
          headers = {
              'Authorization': f'Bearer {token}',
              'Accept': 'application/vnd.github+json',
              'X-GitHub-Api-Version': '2022-11-28'
          }
          
          response = requests.get('https://api.github.com/user', headers=headers)
          
          if response.status_code == 200:
              user_data = response.json()
              print(f'✅ GitHub API: Connected as {user_data.get(\"login\", \"unknown\")}')
          else:
              print(f'❌ GitHub API: {response.status_code}')
              exit(1)
          "

      - name: Test Docker functionality
        run: |
          echo "🧪 Testing Docker functionality..."
          docker --version
          docker run --rm hello-world

      - name: Validate automation scripts
        run: |
          echo "🧪 Validating automation scripts exist..."
          
          scripts=(
            "enhanced_main_automation.py"
            "pip_check_agent.py"
            "autogluon_test_agent.py"
            "sagemaker_test_agent.py"
            "security_test_agent.py"
            "quick_checks_agent.py"
            "github_pr_automation.py"
          )
          
          for script in "${scripts[@]}"; do
            if [ -f "$script" ]; then
              echo "✅ Found: $script"
            else
              echo "❌ Missing: $script"
              exit 1
            fi
          done

      - name: Generate validation report
        if: always()
        run: |
          echo "# 🔍 AutoGluon Setup Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Full Validation:** ${{ inputs.full_validation }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Bedrock:** ${{ inputs.test_bedrock }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "## ✅ Validation Result: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your setup is ready for AutoGluon release automation!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Run the main automation workflow" >> $GITHUB_STEP_SUMMARY
            echo "2. Start with a simple component test first" >> $GITHUB_STEP_SUMMARY
            echo "3. Use 'steps_only' mode for initial testing" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Validation Result: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above and fix the issues before running automation." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Common Issues:" >> $GITHUB_STEP_SUMMARY
            echo "- Missing or incorrect AWS credentials" >> $GITHUB_STEP_SUMMARY
            echo "- Bedrock not enabled in your region" >> $GITHUB_STEP_SUMMARY
            echo "- ECR repositories not created" >> $GITHUB_STEP_SUMMARY
            echo "- GitHub token permissions insufficient" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment Summary:" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS Region:** ${{ env.AWS_DEFAULT_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Account ID:** ${{ env.ACCOUNT_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bedrock Region:** ${{ env.BEDROCK_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CodeBuild Region:** ${{ env.CODEBUILD_REGION }}" >> $GITHUB_STEP_SUMMARY