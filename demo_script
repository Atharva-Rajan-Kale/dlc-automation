step 1

# Cut a new branch in fork to work on a new release

(Already fork the main repo)
mkdir deep-learning-container
cd into this
clone the direc
create and checkout into the new branch

step 2

# Update toml file to build only AutoGluon. See this PR for example.
# It is suggested to have it as a separate commit because it will be rolled back before the merge
# If you are working on previous release update (we do support last 2 released) then dlc-pr-autogluon property should be set to corresponding buildspec file (see PR for example)

open dlc_developer_config.toml
add/append autogluon to build_frameworks
add path autogluon/training/buildspec.yml to dlc-pr-autogluon-training/inference

step 3 

# Create new release docker resources under training/docker/x.y and inference/docker/x.y

if major version update (1.3.0->1.4.0)
    create new directory in autogluon/training/docker and inference/docker
    you can see the list of images after docker login, then select the ones with the same cuda and latest
    first run directly with old docker file, then add the packages to the docker files, and again build and run, if same or some of them package errors still persist, 
    white list them. will have to study the logs again to know which is py and which is os.
    copy paste the old os_scan and py_scan files 

else(1.3.0->1.3.1)
    use same directory as earlier
    (ask diff between the changes made in major and minor version)
    same os_scan and py_scan files 

update AUTOGLUON_VERSION to update version

step 4 & 5

# Copy existing buildspec.yml to buildspec-x-y-z.yml (i.e. buildspec-0-7-0.yml)

# Modify buildspec.yml to point at the new containers; ensure that image_size_baseline properties are up-to-date so the size check would pass. NOTES: there's no size check anymore but would still recommend updating the size.

if major version update (1.3.0->1.4.0)
    create buildspec-${older_version}
    copy buildspec->new file created
    update version and short verion
    update cuda version as well gained from previous steps
    image size baseline you can get after your image is formed and then put the limit acc

step 7

# Update tests (if releasing inference container)
# Generate a trained model file using this notebook using AG of version to be released: package_model_for_dlc.ipynb
# Add the generated file ^ to https://github.com/aws/deep-learning-containers/tree/master/test/sagemaker_tests/autogluon/inference/resources/model

    1, 2 - run the entire .ipynb file which would be stored in the same direc and make it store the tar file accordingly. 

step 8 (docker pull, build and push) & 9 (pip check)

# Build the release locally (I'm using EC2 box for this)

# Run `pip check` to make sure there's no dependency conflict presented
# pipdeptree can be a useful tool to help you understand the dependency tree and resolve conflicts.

    follow tony's code entirely 

step 10

# Either running tests locally - follow the official readme, or submit a PR and let Asimov team CI to run the tests.
# Resolve all security vulnerability found in the tests. Very likely you will need to upgrade a certain package to address. Put a comment on why the upgrade is needed.
# If the package in un-patchable either because the patch will break AG functionality or there's no patched version yet. Refer to the `Allowlist for safety checks` section.

    If the package is patchable ( add to docker files and build again )
    If the package is un-patchable either because the patch will break AG functionality or there's no patched version yet add to os_scan/py_scan 

step 11 

# Run notebook tests in SageMaker using the images published to your account's ECR and upload the results to the drive: https://drive.corp.amazon.com/folders/autogluon/resources/DLC_Containers_Notebooks

    could skip for now

step 12

# Create a bug bash page similar to this: https://quip-amazon.com/eqS1AhqHjYFg/Autogluon-080-DLC-Bug-Bash

step 14

# Send PR to the main repository; all autogluon related tests must pass
# Note: to retry a task if there are capacity issues, add a comment on PR: /retry {TEST} or /rerun

    submit a pr 

step 15

# Once tests passed ^ request review from AutoGluon team member to gather PR feedback and resolve the comments

    manual step, would have to stop till this point perhaps and once comments are resolved, run the next script ( give option, if the user wants to submit a cr or no)
 
step 16

# Revert toml file - now build is ready for merge

    revert toml variables

step 17

# Follow `Build and release DLC candidates` and `Release the RC's to production` section of DLC Currency Release Process to perform the release
# If you are not familiar with brazil and how to create a CR, you might find this useful

    no clue how this step is supposed to work apart from creating a cr

step 18

# Update available images page.

    update latest and prior autogluon

step 20-22

# Deprecate old container if major release: https://w.amazon.com/bin/view/Deep-engine/dl-infra/DLC_Deprecation
# Deprecate old versions in the Asimov Security Scanner and add new supported versions: https://code.amazon.com/packages/AsimovImageSecurityScan/blobs/mainline/--/src/asimov_image_security_scan/images.py
# Send public announcements to slack.

    later


# try to complete till step 9 by the end of this week.

